// Copyright 2020 Lennart Espe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tracker.proto

package tracker

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Tracker struct {
	Addr                 string   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Hash                 []byte   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Size                 int64    `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	ChunkSize            int64    `protobuf:"varint,5,opt,name=chunkSize,proto3" json:"chunkSize,omitempty"`
	ChunkHashes          [][]byte `protobuf:"bytes,6,rep,name=chunkHashes,proto3" json:"chunkHashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tracker) Reset()         { *m = Tracker{} }
func (m *Tracker) String() string { return proto.CompactTextString(m) }
func (*Tracker) ProtoMessage()    {}
func (*Tracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ba8625d8751af3, []int{0}
}

func (m *Tracker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tracker.Unmarshal(m, b)
}
func (m *Tracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tracker.Marshal(b, m, deterministic)
}
func (m *Tracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tracker.Merge(m, src)
}
func (m *Tracker) XXX_Size() int {
	return xxx_messageInfo_Tracker.Size(m)
}
func (m *Tracker) XXX_DiscardUnknown() {
	xxx_messageInfo_Tracker.DiscardUnknown(m)
}

var xxx_messageInfo_Tracker proto.InternalMessageInfo

func (m *Tracker) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Tracker) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Tracker) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tracker) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Tracker) GetChunkSize() int64 {
	if m != nil {
		return m.ChunkSize
	}
	return 0
}

func (m *Tracker) GetChunkHashes() [][]byte {
	if m != nil {
		return m.ChunkHashes
	}
	return nil
}

func init() {
	proto.RegisterType((*Tracker)(nil), "tracker.Tracker")
}

func init() { proto.RegisterFile("tracker.proto", fileDescriptor_a0ba8625d8751af3) }

var fileDescriptor_a0ba8625d8751af3 = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x29, 0x4a, 0x4c,
	0xce, 0x4e, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x66, 0x32,
	0x72, 0xb1, 0x87, 0x40, 0xd8, 0x42, 0x42, 0x5c, 0x2c, 0x89, 0x29, 0x29, 0x45, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0x9c, 0x41, 0x60, 0x36, 0x48, 0x2c, 0x23, 0xb1, 0x38, 0x43, 0x82, 0x49, 0x81, 0x51,
	0x83, 0x27, 0x08, 0xcc, 0x06, 0x89, 0xe5, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x43, 0xd4, 0x81, 0xd8,
	0x20, 0xb1, 0xe2, 0xcc, 0xaa, 0x54, 0x09, 0x16, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x30, 0x5b, 0x48,
	0x86, 0x8b, 0x33, 0x39, 0xa3, 0x34, 0x2f, 0x3b, 0x18, 0x24, 0xc1, 0x0a, 0x96, 0x40, 0x08, 0x08,
	0x29, 0x70, 0x71, 0x83, 0x39, 0x1e, 0x89, 0xc5, 0x19, 0xa9, 0xc5, 0x12, 0x6c, 0x0a, 0xcc, 0x1a,
	0x3c, 0x41, 0xc8, 0x42, 0x49, 0x6c, 0x60, 0xb7, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x61,
	0xe5, 0x6d, 0x22, 0xbc, 0x00, 0x00, 0x00,
}
